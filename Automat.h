/* 
 * Automat.h
 *
 * Created: 14.05.2023 19:51:05
 * Author: Thomas Heß
 */


#ifndef __CLASSAUTOMAT_H__
#define __CLASSAUTOMAT_H__

#include <cstdint>
#include <stddef.h>  // für NULL
#include <stdint.h>
#include "Zustand_Oberklasse.h"
#include "Ereignisse_Transition_Oberklasse.h" // Definition of all possible Events
#include "Automat_Transitionen.h"
#include "Automat_Zustaende.h"
#include "StateMachine.h"
#include "Hardware_Methoden.h" // Damit Automat auf die Hardware (GPIO, ADC, UART, ...) zugreifen kann


/** Define the number of ticks in a second, generated by a timer interrupt */
#define TICKS_PER_SECOND  10 // Timer7 100ms

/** Macro to calculate the number of ticks in a second */
#define Seconds(x)        (x*TICKS_PER_SECOND)

/** Timeout in Seconds */
#define TIMEOUT           15


enum {
	/** Size of Event Queue */
	EventQueueSize = 4
};



class Automat
{
//variables
protected:
private:

unsigned int zeit;
bool aBlinkZustand;




	// Zustände, Objekte aus den jeweiligen Zustandsklassen in ClassApplicationStates.h

	 StateInitialisierung 					initialisierung;
     StateBetrieb         					betrieb;
	 SateStellenStunden   					stellen_stunden;
	 SateStellenMinuten   					stellen_minuten;
	 SateStellenSekunden  					stellen_sekunden;
     

	State* const                initState = &initialisierung; // Erster Zustand nach Pseudo-Start-Zustand

	// Transitionen, Objekte aus den jeweiligen Zustandsklassen in ClassTransitions.h

	Trans_Initialisierung_Betrieb			initialisierung2betrieb;
	Trans_Betrieb_Betrieb			        betrieb2betrieb;
    Trans_Betrieb_StellenStunden			betrieb2stunden_stellen;
	Trans_StellenStunden_StellenStunden		stellen_stunden2stellen_stunden;
	Trans_StellenStunden_StellenMinuten		stellen_stunden2stellen_minuten;
	Trans_StellenMinuten_StellenMinuten		stellen_minuten2stellen_minuten;
	Trans_StellenMinuten_StellenSekunden	stellen_minuten2stellen_sekunden;
	Trans_StellenSekunden_StellenSekunden	stellen_sekunden2stellen_sekunden;
	Trans_StellenSekunden_Betrieb			stellen_sekunden2betrieb;

	// Finite State Machine, Objekt aus StateMachine.h
	StateMachine eineFSM;

	// Zustandsfolgetabelle für diesen Automaten

 
	State2State fsmApp[9] = {
		// currentState State*   transition	ClassTransition*					   	nextState State*		altState State*

        {&initialisierung   ,   &initialisierung2betrieb            ,              	&betrieb        	,		NULL		},
        {&betrieb           ,   &betrieb2betrieb                    ,              	&betrieb        	,		NULL		},
        {&betrieb           ,   &betrieb2stunden_stellen            ,               &stellen_stunden	,		NULL		},
        {&stellen_stunden   ,   &stellen_stunden2stellen_stunden    ,               &stellen_stunden	,		NULL		},
        {&stellen_stunden   ,   &stellen_stunden2stellen_minuten    ,               &stellen_minuten	,		NULL		},
        {&stellen_minuten   ,   &stellen_minuten2stellen_minuten    ,               &stellen_minuten	,		NULL		},
        {&stellen_minuten   ,   &stellen_minuten2stellen_sekunden   ,               &stellen_sekunden	,		NULL		},
        {&stellen_sekunden  ,   &stellen_sekunden2stellen_sekunden  ,               &stellen_sekunden	,		NULL		},
        {&stellen_sekunden  ,   &stellen_sekunden2betrieb			,               &betrieb  			,		NULL		},
	};

	volatile Events evQueue[EventQueueSize]; // Feld aus Event-enum, in der die einzelnen aufgetretenen Ereignisse abgelegt werden

//functions
public:
	Automat();
	~Automat();
	 
	/* Initializes the Finite State Machine  */
	void init(); // ruft init() aus StateMachine auf!
	
	/* Send an Event to the Application, note: The Event must be processed by process() */
	void sendEvent(Events); // ruft sendEvent() aus StateMachine auf!
	
	 /* Process Event if one is available and perform change of state, return True if there was an Event available */
	 bool process_StateChange(); // ruft StateChange() aus StateMachine auf!
	 

     uint16_t fsm_get_timeInState(); // ruft get_timeInState() aus der StateMachine auf!

     void fsm_set_timeInState(uint16_t); // ruft set_timeInState() aus der StateMachine auf!
     
    void set_zeit(unsigned int pZeit);  //Setzt die vab Zeit

    unsigned int get_zeit();            //gibt die aktuelle Zeit zurück

    void set_BlinkZustand(bool pBlinkZustand);

    bool get_BlinkZustand();

}; // ClassAutomat

#endif //__CLASSAUTOMAT_H__